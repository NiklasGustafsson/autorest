@using System.Globalization
@using System.Linq;
@using System
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.CSharp
@using AutoRest.CSharp.Model
@inherits AutoRest.Core.Template<AutoRest.CSharp.Model.MethodCs>

@if (!string.IsNullOrWhiteSpace(Model.Description) || !string.IsNullOrEmpty(Model.Summary))
{
@:/// <summary>
@:@WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment())
    if (!string.IsNullOrEmpty(Model.ExternalDocsUrl))
    {
@:/// <see href="@Model.ExternalDocsUrl" />
    }
@:/// </summary>
}
@if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
{
@:/// <remarks>
@:@WrapComment("/// ", Model.Description.EscapeXmlComment())
@:/// </remarks>
}
@foreach (var parameter in Model.LocalParameters)
{
@:/// <param name='@parameter.Name'>
@WrapComment("/// ", parameter.Documentation.EscapeXmlComment())@:
@:/// </param>
}
@if (Model.ReturnTypeString.Equals("void"))
{
@:@((Model as AutoRest.CSharp.Server.Model.MethodCs).HttpAttribute)
@:public void @(Model.Name)(@(Model.GetSyncMethodParameterDeclaration(false)))
@:{    
@:    // TODO: Consider whether this method needs to be asynchronous.
@:    return;
@:}
}
else
{
@:/// <return>
@WrapComment("/// ", Model.ReturnTypeString)@:
@:/// </return>
@:@((Model as AutoRest.CSharp.Server.Model.MethodCs).HttpAttribute)
@:public @(Model.ReturnTypeString) @(Model.Name)(@(Model.GetSyncMethodParameterDeclaration(false)))
@:{
@:    // TODO: Consider whether this method needs to be asynchronous.
@:    return default(@(Model.ReturnTypeString));
@:}
}
